/*
    This file was generated by BeXL
    Copyright (c) 2000 Simon Huet
*/


#include <Application.h>
#include "message_labels.h"
#include "LJViewHistory.h"
#include <Alert.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <string>
#include <OS.h>

#include "HistoryListItem.h"
#include "ResponseBlockManager.h"
#include "CommandBlockManager.h"
#include "LJApplication.h"

static int32 fillhistory(void *data);


LJViewHistory::LJViewHistory() : BView(BRect(5, 5, 348, 217), 
                                    "History", B_FOLLOW_TOP | B_FOLLOW_LEFT, 
                                    B_WILL_DRAW | B_NAVIGABLE)
{

    _bxl_attached = false;

    history_list = new BListView(BRect(7, 47, 319, 208), "listview", 
                                    B_SINGLE_SELECTION_LIST, 
                                    B_FOLLOW_TOP_BOTTOM | B_FOLLOW_LEFT_RIGHT, 
                                    B_WILL_DRAW|B_FULL_UPDATE_ON_RESIZE);

    scrollview3 = new BScrollView("View", history_list, 
                                    B_FOLLOW_TOP | B_FOLLOW_LEFT, 
                                    B_WILL_DRAW | B_NAVIGABLE, false, true, 
                                    B_FANCY_BORDER);

    stringview5 = new BStringView(BRect(7, 3, 331, 15), "StringView", 
        "This is the list of your past entries, you can edit or delete them", 
        B_FOLLOW_TOP | B_FOLLOW_LEFT, B_WILL_DRAW | B_NAVIGABLE);

    journalText = new BStringView(BRect(7, 20, 80, 39), "journalText", 
        "Journal to Edit:", 
        B_FOLLOW_TOP | B_FOLLOW_LEFT, B_WILL_DRAW | B_NAVIGABLE);
    journalMenu = new BPopUpMenu("Journals", true, true, B_ITEMS_IN_COLUMN);
    journalMenu->SetRadioMode(true);
    journalField = new BMenuField(BRect(85, 20, 168, 39), "journalField", 
                            "Access", journalMenu, new BMessage(DEFAULT_MSG), 
                            B_FOLLOW_LEFT | B_FOLLOW_TOP, B_WILL_DRAW | 
                            B_NAVIGABLE);

    journalField->SetDivider(0);
    ((LJApplication *)be_app)->help->SetHelp(journalField,
        "Journal you wish to edit. (Remember: Even though you can "
        "see everyone's posts, you can only edit posts from you)");


    // add the "default" entry
    Window()->Lock();
    BMenuItem *item = new BMenuItem("default",
                            new BMessage(HISTORY_LIST_JOURNAL_MSG));
    item->SetMarked(true);
    journalField->Menu()->AddItem(item);

    if( Window()->IsLocked() ) {
        Window()->Unlock(); 
    }

    SetViewColor((rgb_color) {216,216,216,255});
    BFont font(be_bold_font);
    font.SetSize(12);
    history_list->SetFont(&font);
    history_list->SetDrawingMode(B_OP_OVER);
    history_list->SetInvocationMessage(new BMessage(EDIT_HISTORY_EVENT));

    usejournal = "";
}

LJViewHistory::~LJViewHistory(void)
{
}

void
LJViewHistory::AttachedToWindow(void)
{
    if(!_bxl_attached) {
        AddChild(scrollview3);
        AddChild(stringview5);
        AddChild(journalText);
        AddChild(journalField);
        _bxl_attached = true;
    }

    SetViewColor((rgb_color) {216,216,216,255});

    history_list->SetTarget(this);
    thread_id fill_thread = spawn_thread(fillhistory, 
                        "LJViewHistory::FillList", B_NORMAL_PRIORITY, this);
    resume_thread(fill_thread);

}

void
LJViewHistory::AllAttached(void)
{

}

void
LJViewHistory::MessageReceived(BMessage *message)
{
    switch (message->what)
    {
        case EDIT_HISTORY_EVENT: {
            int32 selected = history_list->CurrentSelection();
            if (selected<0) return;
            be_app->PostMessage(CLEAR_EVENT_EDITOR);
            BMessage *msg = new BMessage(EDIT_HISTORY_EVENT);
            msg->AddString("itemid", 
                ((HistoryListItem *)history_list->ItemAt(selected))->item_id);

            if( usejournal.length() > 0 ) {
                msg->AddString("usejournal", usejournal.c_str()); 
            }

            be_app->MessageReceived(msg);

            break;
        }
        case NEW_JOURNAL_MSG: {
            Window()->Lock();
            journalField->Menu()->AddItem(
                    new BMenuItem(message->FindString("usejournal"),
                                    new BMessage(HISTORY_LIST_JOURNAL_MSG)));

            if( Window()->IsLocked() ) {
                Window()->Unlock(); 
            }

            break;
        }
        case HISTORY_LIST_JOURNAL_MSG: {
            BMenuItem *menuitem;

            message->FindPointer("source", (void **) &menuitem);
            if( menuitem != NULL ) {
                if( strcmp(menuitem->Label(), "default" ) ) {
                    usejournal = menuitem->Label();
                }
                else {
                    usejournal = "";
                }
            }

            thread_id fill_thread = spawn_thread(fillhistory, 
                        "LJViewHistory::FillList", B_NORMAL_PRIORITY, this);
            resume_thread(fill_thread);
            break;
        }
    }
}


static int32 fillhistory(void *data)
{
    LJViewHistory *view = (LJViewHistory *)data;
    int events_count = 0;
    
    view->Window()->Lock();

    view->journalField->SetEnabled(false);

    if(!view->history_list->IsEmpty()) {
        view->history_list->MakeEmpty();
    }

    if(view->Window()->IsLocked()) {
        view->Window()->Unlock();   
    }
    
    CommandBlockManager *man = new CommandBlockManager();

    man->SetValue("mode", "getevents");
    man->SetValue("truncate", "60");
    man->SetValue("selecttype", "lastn");
    man->SetValue("howmany", "50");
    man->SetValue("lineendings", "unix");
    if( view->usejournal.length() > 0 ) {
        man->SetValue("usejournal", view->usejournal.c_str()); 
    }

    char *response = ((LJApplication *)be_app)->SendCommand(man);

    delete man;
    man = NULL;
    
    if (response) { char key_event[30]; char key_itemid[30];
ResponseBlockManager *block = new ResponseBlockManager(response);

        if (block->GetValue("success")) {
            if (strcmp(block->GetValue("success"), "OK")) {
                if (block->GetValue("errmsg")) {
                    (new BAlert("", block->GetValue("errmsg"), "OK", NULL, NULL,
                        B_WIDTH_AS_USUAL, B_STOP_ALERT))->Go();

                    view->Window()->Lock();

                    view->journalField->SetEnabled(true);

                    if (view->Window()->IsLocked()) {
                        view->Window()->Unlock();
                    }

                    return 0;
                }
            }
            
            if (block->GetValue("events_count")) {
                events_count = atoi(block->GetValue("events_count"));
                view->Window()->Lock();
                for (int i=1; i<=events_count; i++) {
                    sprintf(key_event, "events_%d_event", i);
                    sprintf(key_itemid, "events_%d_itemid", i);
                    const char *event = block->GetValue(key_event, true);
                    const char *itemid = block->GetValue(key_itemid);
                    view->history_list->AddItem(new HistoryListItem(event, 
                                                                    itemid));
                }
                
                view->journalField->SetEnabled(true);

                if (view->Window()->IsLocked()) {
                    view->Window()->Unlock();
                }
            }
        }       

        delete block;
        return events_count;
    }

    return B_OK;
}



